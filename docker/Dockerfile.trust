# Base image with Bun
FROM oven/bun:1-slim AS base
WORKDIR /app

# Install system dependencies and Node.js
FROM base AS deps
RUN apt update && apt install -y \
    curl \
    openssl \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js properly for better compatibility
ARG NODE_VERSION=20
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy package files for dependency installation
FROM deps AS install
WORKDIR /app

# Create directory structure
RUN mkdir -p apps/trust apps/app apps/portal apps/framework-editor \
    packages/analytics packages/db packages/email packages/integrations \
    packages/kv packages/notifications packages/tsconfig packages/ui packages/utils

# Copy root package files
COPY package.json turbo.json ./
COPY bun.lockb* package-lock.json* yarn.lock* pnpm-lock.yaml* ./
COPY .npmrc* ./

# Copy all package.json files
COPY apps/*/package.json ./apps/
COPY packages/*/package.json ./packages/

# Set environment variables
ENV PRISMA_BINARIES_MIRROR=https://binaries.prisma.sh
ENV NODE_OPTIONS="--dns-result-order=ipv4first"
ENV HUSKY=0

# Install dependencies
RUN --mount=type=cache,target=/root/.bun/install/cache \
    bun install --frozen-lockfile

# Skip pre-download to avoid Bun integrity issues

# Builder stage
FROM deps AS builder
WORKDIR /app

# Copy dependencies
COPY --from=install /app/node_modules ./node_modules

# Copy source files
COPY . .

# Set build environment
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NODE_OPTIONS="--dns-result-order=ipv4first"

# Set dummy environment variables for build time
ENV DATABASE_URL="postgresql://dummy:dummy@dummy:5432/dummy"

# Install Prisma globally with npm to avoid Bun integrity issues
RUN npm install -g prisma@6.8.2

# Generate Prisma client with dummy DATABASE_URL
RUN cd packages/db && DATABASE_URL="postgresql://dummy:dummy@dummy:5432/dummy" prisma generate

# Build the trust app
RUN cd apps/trust && bun run build

# Production stage
FROM deps AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy the entire built application
COPY --from=builder --chown=nextjs:nodejs /app/apps/trust ./apps/trust
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/turbo.json ./

# Copy workspace packages that trust depends on
COPY --from=builder --chown=nextjs:nodejs /app/packages ./packages

USER nextjs

EXPOSE 3008

ENV PORT=3008
ENV HOSTNAME="0.0.0.0"

WORKDIR /app/apps/trust

CMD ["npm", "start"]